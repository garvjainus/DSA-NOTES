Assignments :

https://leetcode.com/problems/product-of-array-except-self 
https://leetcode.com/problems/merge-sorted-array/
Do you have a github account . 
Create a repo callled as DSA
Read about arrays , strings , arraylist , java list , array list , hashmap , bubble , insert and selection sort . 
stability , time complexity and space complexity . 




Basic Fundamentals :

1) Arrays 
2) Strings 
3) HashMap 
4) Sorting 
5) Searching 


DSA :

Data Structures 

1) Stacks 
2) Queues
3) LinkedList
4) Trees
5) Graphs 
6) Tries 

Algorithms :
1) Divide & Conquers 
2) BackTracking 
3) Dynamic Programming
4) Greedy 



import java.util.*;

class ProductArray {
    public static int[] findProduct(int[] arr) {
        int[] product = new int[arr.length];
        int left = 1;

        for (int i = 0; i < arr.length; i++) {
            int currentProduct = 1;

            // Compute the product of values to the right of the current index
            for (int j = i + 1; j < arr.length; j++) {
                currentProduct *= arr[j];
            }

            // Push the product of current element and product of all left elements to product
            product[i] = currentProduct * left;

            // Update 'left' by multiplying with the current element
            left *= arr[i];
        }

        return product;
    }


    }
    
    //// [1, 2, 3, 4]
    public static int[] findProduct(int arr[]) {
        int n = arr.length;
        int i, left = 1;
        int product[] = new int[n];

        // Product of elements on left side excluding arr[i]
        for (i = 0; i < n; i++) {
            product[i] = left;
            left *= arr[i];
        }
        // product : [1, 1 ,2 ,6]

        // Second pass: Update the product list by calculating products from right to left
        int right = 1;
        for (i = n - 1; i >= 0; i--) {
            product[i] *= right;
            right *= arr[i];
        }

        return product;
    }

}

int[][] z = new int[2][2];
int[] x = new int[5]{1,2,3,4,5};
int y = x[x.length-1];
int y1 = x[k];

int sum = 0;
for(int i = 0; i < x.length; i++){
	sum += x[i];
}
int average = sum/x.length; 

String x = "asdfasd";

Given two integer arrays, nums1 and nums2, of size 
m and n respectively, sorted in nondecreasing order. 
Merge nums1 and nums2 into a single array sorted in nondecreasing order.
nums1 = [1, 3 ,4, 5] nums2 = [2,6,7,8]
output=  [1, 2, 3, 4, 5, 6, 7, 8]
output = [1, 2, 3, 4, 5, 6, 7, 8]




String x = new String*("Asfdasd");
char y = x.charAt(3);

int[] x = new int[2];
int[] y = new int[2]; 

for(int i = 0; i < x.length; i++){
	y[i] = x[i];
}

int z = 1;


import java.util.ArrayList;
import java.util.Arrays;

class Solution {
    public static ArrayList<Integer> mergeArrays(ArrayList<Integer> nums1, ArrayList<Integer> nums2) {
        ArrayList<Integer> result = new ArrayList<>();
        int p1 = 0;
        int p2 = 0;

        // Traverse both ArrayLists until the end of either ArrayList is reached
        while (p1 < nums1.size() && p2 < nums2.size()) {
            // If the value at p1 is smaller than the value at p2, store the value at p3 and increment p1
            if (nums1.get(p1) < nums2.get(p2)) {
                result.add(nums1.get(p1));
                p1++;
            }
            // Otherwise, store the value at p2 and increment p2
            else {
                result.add(nums2.get(p2));
                p2++;
            }
        }

        // If elements remain in nums1, add them to the result
        while (p1 < nums1.size()) {
            result.add(nums1.get(p1));
            p1++;
        }

        // If elements remain in nums2, add them to the result
        while (p2 < nums2.size()) {
            result.add(nums2.get(p2));
            p2++;
        }

        return result;
        
        -----------------------------------------------------------------------------------
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // Set p1 and p2 to point to the end of their respective arrays.
        int p1 = m - 1;
        int p2 = n - 1;

        // And move p backward through the array, each time writing
        // the smallest value pointed at by p1 or p2.
        for (int p = m + n - 1; p >= 0; p--) {
            if (p2 < 0) {
                break;
            }
            if (p1 >= 0 && nums1[p1] > nums2[p2]) {
                nums1[p] = nums1[p1--];
            } else {
                nums1[p] = nums2[p2--];
            }
        }
    }
}

[1, 2, 3, 0 , 0 0] [2,5 ,6]

nums1 = [1,2 ,3, 0 , 0 ,0]
nums2= [2,5,6] 
p = 5

[1, 2, 3, 0, 0 , 6]

[1, 2, 3, 0, 5 , 6]

[1, 2, 3, 0, 5 , 6]



[1, 2, 3, 0, 5 , 6]



num1ptr  = 2
nums2ptr = 0





        
        
        
        
        
        
    }
